package util;

import java.io.FileOutputStream;
import java.util.ArrayList;
import java.util.Date;

import model.Match;
import model.Ticket;

import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Element;
import com.itextpdf.text.Font;
import com.itextpdf.text.Image;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.Phrase;
import com.itextpdf.text.pdf.BarcodeQRCode;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;

public class PrintToPDF {
	
	private static String FILE = "d:/ECLIPSEEE/TicketNr";
	private static Font catFont = new Font(Font.FontFamily.TIMES_ROMAN, 18, Font.BOLD);
	private static Font smallBold = new Font(Font.FontFamily.TIMES_ROMAN, 12, Font.BOLD);
	private int tickNr = 1;
	public static String myString;
	
	public void generateCode() {
		tickNr = 1 + (int)(Math.random() * ((100 - 1) + 1));
	}
	
	public void createPDF(Ticket ticket) {
	    try {
	      Document document = new Document();
	      generateCode();
	      PdfWriter.getInstance(document, new FileOutputStream(FILE + tickNr + ".pdf"));
	      document.open();
	      addTitlePage(document);
	      createTable1(ticket, document);
	      createTable2(ticket, document);
	      addDate(document);
	      document.close();
	    } catch (Exception e) {
	      e.printStackTrace();
	    }
	  }
	
	private static void addDate(Document document) 
			throws DocumentException {
		
		Paragraph preface = new Paragraph();
		// We add one empty line
		addEmptyLine(preface, 3);
		// Lets write a big header
		preface.setAlignment(Element.ALIGN_CENTER);
		preface.add(new Paragraph("Ticket generated by: " + System.getProperty("user.name") + " on " + new Date(), smallBold));
		addEmptyLine(preface, 2);
		preface.add(new Paragraph("Ticket code is : " + myString, catFont));
		document.add(preface);
		addEmptyLine(preface, 2);
	}
	
	private static void addTitlePage(Document document) 
			throws DocumentException {
		
		Paragraph preface = new Paragraph();
		// We add one empty line
		addEmptyLine(preface, 1);
		// Lets write a big header
		preface.setAlignment(Element.ALIGN_CENTER);
		preface.add(new Paragraph("BB-Bet ticket\n\n", catFont));
		document.add(preface);
		addEmptyLine(preface, 3);
	}
	
	private static void createTable1(Ticket ticket, Document document) {
		
		ArrayList<Match> matchesList = new ArrayList<Match>();
		
		PdfPTable table = new PdfPTable(5);

		PdfPCell c1 = new PdfPCell(new Phrase("Match ID"));
		c1.setHorizontalAlignment(Element.ALIGN_CENTER);
		table.addCell(c1);

		c1 = new PdfPCell(new Phrase("Home Team"));
		c1.setHorizontalAlignment(Element.ALIGN_CENTER);
		table.addCell(c1);

		c1 = new PdfPCell(new Phrase("Away Team"));
		c1.setHorizontalAlignment(Element.ALIGN_CENTER);
		table.addCell(c1);
		    
		c1 = new PdfPCell(new Phrase("Type"));
		c1.setHorizontalAlignment(Element.ALIGN_CENTER);
		table.addCell(c1);
		    
		c1 = new PdfPCell(new Phrase("Share"));
		c1.setHorizontalAlignment(Element.ALIGN_CENTER);
		table.addCell(c1);
		    
		table.setHeaderRows(1);
		    
		matchesList = (ArrayList<Match>) ticket.getTicket();
		for (Match match01: matchesList)
		{
			table.addCell("" + match01.getMatchid() );
			table.addCell("" + match01.getHostTeam() );
			table.addCell("" + match01.getAwayTeam() );
			table.addCell("" + match01.getShareType() );
			table.addCell("" + match01.getShareValue() );
		}   
		
		try {
			document.add(table);
		} catch (DocumentException e) {
			e.printStackTrace();
		}
		
	}

private static void createTable2(Ticket ticket, Document document) {
		
		PdfPTable table2 = new PdfPTable(3);
		
		PdfPCell c1 = new PdfPCell(new Phrase("Final Share"));
	    c1.setHorizontalAlignment(Element.ALIGN_CENTER);
	    table2.addCell(c1);
	    
	    c1 = new PdfPCell(new Phrase("BET"));
	    c1.setHorizontalAlignment(Element.ALIGN_CENTER);
	    table2.addCell(c1);
	    
	    c1 = new PdfPCell(new Phrase("WIN"));
	    c1.setHorizontalAlignment(Element.ALIGN_CENTER);
	    table2.addCell(c1);

	    table2.setHeaderRows(1);
	    
	    table2.addCell("" + ticket.getResult() );
	    table2.addCell("" + ticket.getBet() );
	    table2.addCell("" + ticket.getGainValue() );
		
	    myString = ticket.generateCode(17);
	    String myTicketStatus = "" + ticket.getTicketStatus();
	    
		try {
			document.add(table2);
			BarcodeQRCode qrcode = new BarcodeQRCode(myTicketStatus.trim(), 1, 1, null);
	          Image qrcodeImage = qrcode.getImage();
	          qrcodeImage.setAbsolutePosition(240,300);
	          qrcodeImage.scalePercent(400);
	          document.add(qrcodeImage);
		} catch (DocumentException e) {
			e.printStackTrace();
		}
		
	}
	
	private static void addEmptyLine(Paragraph paragraph, int number) {
	    for (int i = 0; i < number; i++) {
	      paragraph.add(new Paragraph(" "));
	    }
	  }
	
}
